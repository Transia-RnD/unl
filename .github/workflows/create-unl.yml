name: Create UNL Json

on:
  push:
    branches: [mankins/automate]
    # paths:
    #   - "data/unl-raw.yaml"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run without uploading to GCP"
        required: false
        default: "false"

permissions:
  contents: write # for creating a release
  id-token: write # for GCP OIDC
  actions: read

jobs:
  build:
    name: Build UNL
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      XRPL_CLI_SECRET_BACKEND: ${{ secrets.XRPL_CLI_SECRET_BACKEND }}
    steps:
      # - name: Debug GitHub context
      #   run: |
      #     echo "GITHUB_REF: $GITHUB_REF"
      #     echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
      #     echo "GITHUB_WORKFLOW_REF: $GITHUB_WORKFLOW_REF"
      #     echo "Repository: ${{ github.repository }}"
      #     echo "Actor: ${{ github.actor }}"
      #     echo "Ref: ${{ github.ref }}"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: auth
        name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_environment_variables: true
          create_credentials_file: true

      - name: Show active account
        run: |
          gcloud auth list --filter="status:ACTIVE" --format="value(account)"
          gcloud config list project --format="value(core.project)"

      - name: Verify identity
        run: |
          echo "OIDC â†’ GCP token:"
          echo "${{ steps.auth.outputs.auth_token }}"
          curl -H "Authorization: Bearer ${{ steps.auth.outputs.auth_token }}" \
              https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}:generateAccessToken \
              -H "Content-Type: application/json" \
              -d '{"scope":["https://www.googleapis.com/auth/cloud-platform"]}' | jq

      - name: Show active GCP identity
        run: |
          gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud auth list
          gcloud auth list --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud config list

      - name: Fetch validator keys secret
        id: get-secret
        run: |
          SECRET=$(gcloud secrets versions access latest --secret="unl_validator_keys" --project="${{ env.GCP_PROJECT_ID }}")
          echo "UNL_VALIDATOR_KEYS<<EOF" >> $GITHUB_ENV
          echo "$SECRET" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::add-mask::$UNL_VALIDATOR_KEYS"

      - name: Generate expiration and timestamp
        id: meta
        run: |
          TS=$(date -u +"%Y%m%d%H%M")
          if date -d "+4 months" >/dev/null 2>&1; then
            EXP=$(date -d "+4 months" +"%Y-%m-%d")
          else
            EXP=$(date -v+4m +"%Y-%m-%d")
          fi
          echo "ts=$TS" >> $GITHUB_OUTPUT
          echo "exp=$EXP" >> $GITHUB_OUTPUT

      - name: Setup Node.js (or your CLI environment)
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Install CLI
        run: |
          cd scripts/xrpl-cli
          pnpm install --frozen-lockfile

      - name: Generate UNL
        run: |
          node scripts/xrpl-cli/src/xrplf-cli.js unl generate \
          --validators="data/unl-raw.yaml" \
          --expiration="${{ steps.meta.outputs.exp }}" \
          --quiet \
          --output="unl-${{ steps.meta.outputs.ts }}.json"

      - name: Upload to GCP
        if: ${{ github.event.inputs.dry_run != 'true' && steps.meta.outputs.ts != '' }}
        run: |
          gsutil cp "unl-${{ steps.meta.outputs.ts }}.json" gs://xrplf-unl/unl/unl-${{ steps.meta.outputs.ts }}.json
